// Struct for itemspawn information. 
class RTIPSpawnItem play
{
	string    		           spawnname;            // ID by string for spawner
	Array<RTIPSpawnItemEntry>    spawnreplaces;        // ID by string for spawnees
	int 	                   spawnreplacessize;    // Cached size of the above array
	bool                       isPersistent;         // Whether or not to persistently spawn.
	bool					   replaceitem;
}

class RTIPSpawnItemEntry play
{
	string name;
	int    chance;
}

// Struct for passing useinformation to ammunition. 
class RTIPSpawnAmmo play
{
	string		  ammoname;		   // ID by string for the header ammo.
	Array<string> weaponnames;     // ID by string for weapons using that ammo.
	int           weaponnamessize; // Cached size of the above array
}

// One handler to rule them all. 
class RTIPHandler : EventHandler
{
	// List of persistent classes to completely ignore. 
	// This -should- mean this mod has no performance impact. 
	static const class<actor> blacklist[] =
	{
		"HDSmoke",
		"BloodTrail",
		"CheckPuff",
		"WallChunk",
		"HDBulletPuff",
		"HDFireballTail",
		"ReverseImpBallTail",
		"HDSmokeChunk",
		"ShieldSpark",
		"HDFlameRed",
		"HDMasterBlood",
		"PlantBit",
		"HDBulletActor",
		"HDLadderSection"
	};

	// List of weapon-ammo associations.
	// Used for ammo-use association on ammo spawn (happens very often). 
	array<RTIPSpawnAmmo> ammospawnlist;
	int ammospawnlistsize;
	
	// List of item-spawn associations.
	// used for item-replacement on mapload. 
	array<RTIPSpawnItem> itemspawnlist;
	int itemspawnlistsize;
	
	// appends an entry to itemspawnlist;
	void additem(string name, Array<RTIPSpawnItemEntry> replacees, bool persists, bool rep=true)
	{
		// Creates a new struct;
		RTIPSpawnItem spawnee = RTIPSpawnItem(new('RTIPSpawnItem'));
		
		// Populates the struct with relevant information,
		spawnee.spawnname = name;
		spawnee.isPersistent = persists;
		spawnee.replaceitem = rep;
		for(int i = 0; i < replacees.size(); i++)
		{
			spawnee.spawnreplaces.push(replacees[i]);
			spawnee.spawnreplacessize++;
		}
		
		// Pushes the finished struct to the array. 
		itemspawnlist.push(spawnee);
		itemspawnlistsize++;
	}

	RTIPSpawnItemEntry additementry(string name, int chance)
	{
		// Creates a new struct;
		RTIPSpawnItemEntry spawnee = RTIPSpawnItemEntry(new('RTIPSpawnItemEntry'));
		spawnee.name = name.makelower();
		spawnee.chance = chance;
		return spawnee;
		
	}

	// appends an entry to ammospawnlist;
	void addammo(string name, Array<string> weapons)
	{
		// Creates a new struct;
		RTIPSpawnAmmo spawnee = RTIPSpawnAmmo(new('RTIPSpawnAmmo'));
		spawnee.ammoname = name.makelower();
		
		// Populates the struct with relevant information,
		for(int i = 0; i < weapons.size(); i++)
		{
			spawnee.weaponnames.push(weapons[i].makelower());
			spawnee.weaponnamessize++;
		}

		// Pushes the finished struct to the array. 
		ammospawnlist.push(spawnee);
		ammospawnlistsize++;
	}

	bool cvarsAvailable;
	
	// Populates the replacement and association arrays. 
	void init()
	{
		cvarsAvailable = true;

		// --------------------
		// Item Spawns
		// --------------------

		// Field Medic Kit
		Array<RTIPSpawnItemEntry> spawns_fieldmedic;
		spawns_fieldmedic.push(additementry('PortableStimpack', fieldmedic_stimpack_bias));
		spawns_fieldmedic.push(additementry('PortableMedikit', fieldmedic_medikit_bias));
		additem('HDFieldMedicKit', spawns_fieldmedic, fieldmedic_persistent_spawning);

		// First Aid Spray
		Array<RTIPSpawnItemEntry> spawns_firstaidspray;
		spawns_firstaidspray.push(additementry('PortableStimpack', firstaidspray_stimpack_bias));
		spawns_firstaidspray.push(additementry('PortableMedikit', firstaidspray_medikit_bias));
		additem('HDFirstAidSpray', spawns_firstaidspray, firstaidspray_persistent_spawning);

		// Radi-Cola
		Array<RTIPSpawnItemEntry> spawns_radicola;
		// This technically isn't really accurate but I don't feel like screwing with it more before it's released. - [Ted]
		spawns_radicola.push(additementry('HDHealingPotion', radicola_healthbonus_bias));
		spawns_radicola.push(additementry('PortableStimpack', radicola_stimpack_bias));
    	spawns_radicola.push(additementry('PortableMedikit', radicola_medikit_bias));
		spawns_radicola.push(additementry('HDGoreBits', radicola_gorebits_bias));
		spawns_radicola.push(additementry('TerrorCasing', radicola_gorebits_bias));
		additem('HDRadiCola', spawns_radicola, radicola_persistent_spawning, false);

		// Half-pack
		Array<RTIPSpawnItemEntry> spawns_halfpack;
		spawns_halfpack.push(additementry('WildBackpack', halfpack_spawn_bias));
		additem('WildHalfPack', spawns_halfpack, halfpack_persistent_spawning);

		// Anti-Gravity Boots
		Array<RTIPSpawnItemEntry> spawns_gravboots;
		spawns_gravboots.push(additementry('HDSoulsphere', gravboots_spawn_bias));
		additem('AntiGravBoots', spawns_gravboots, gravboots_persistent_spawning, false);

    	// Anti-Radiation Boots
		Array<RTIPSpawnItemEntry> spawns_radboots;
		spawns_radboots.push(additementry('PortableRadsuit', radboots_spawn_bias));
		additem('ProtectiveRadBoots', spawns_radboots, radboots_persistent_spawning, false);

		// Leather Armor
		Array<RTIPSpawnItemEntry> spawns_jacketarmour;
		spawns_jacketarmour.push(additementry('HDArmour', jacketarmour_spawn_bias));
		additem('HDLeatherArmour', spawns_jacketarmour, jacketarmour_persistent_spawning, false);
	}
	
	// Random stuff, stores it and forces negative values just to be 0.
	bool giverandom(int chance)
	{
		bool result = false;
		int iii = random(0, chance);
		if(iii < 0)
			iii = 0;
		if (iii == 0)
		{
			if(chance > -1)
				result = true;
		}
		
		return result;
	}

	// Tries to create the item via random spawning.
	bool trycreateitem(worldevent e, RTIPSpawnItem f, int g, bool rep)
	{
		bool result = false;
		if(giverandom(f.spawnreplaces[g].chance))
		{
			vector3 spawnpos = e.thing.pos;
			let spawnitem = Actor.Spawn(f.spawnname, (spawnpos.x, spawnpos.y, spawnpos.z));
			if(spawnitem)
			{
				if(rep)
				{
					e.thing.destroy();
					result = true;
				}
			}

		}
		return result;
	}
	
	override void worldthingspawned(worldevent e)
	{
		string candidatename;
		
		// loop controls.
		int i, j;
		bool isAmmo = false;

		// Return if range.
        if(level.MapName ~== "RANGE")
        {
                return;
        }
		
		// Populates the main arrays if they haven't been already. 
		if(!cvarsAvailable)
			init();
		
		
		for(i = 0; i < blacklist.size(); i++)
		{
			if (e.thing is blacklist[i])
				return;
		}
		
		// Checks for null events. 
		if(!e.Thing)
		{
			return;
		}

		candidatename  = e.Thing.GetClassName();
		candidatename = candidatename.makelower();
		
		// Pointers for specific classes.
		let ammo_ptr   = HDAmmo(e.Thing);
		
		// Whether or not an item can use this.
		if(ammo_ptr)
		{
			// Goes through the entire ammospawn array.
			for(i = 0; i < ammospawnlistsize; i++)
			{
				if(candidatename == ammospawnlist[i].ammoname)
				{
					// Appends each entry in that ammo's subarray.
					for(j = 0; j < ammospawnlist[i].weaponnamessize; j++)
					{
						// Actual pushing to itemsthatusethis().
						if(ammo_ptr)
							ammo_ptr.ItemsThatUseThis.Push(ammospawnlist[i].weaponnames[j]);
					}
				}
			}
		}
				
		// Iterates through the list of item candidates for e.thing.
		for(i = 0; i < itemspawnlistsize; i++)
		{
			// Tries to cast the item as an inventory. 
			let thing_inv_ptr = Inventory(e.thing);
		
			// Checks if the item in question is owned.
			bool owned    = thing_inv_ptr && (thing_inv_ptr.owner);

			// Checks if the level has been loaded more than 1 tic.
			bool prespawn = !(level.maptime > 1);
			
			// Checks if persistent spawning is on.
			bool persist  = (itemspawnlist[i].isPersistent);
			
			// if an item is owned or is an ammo (doesn't retain owner ptr), 
			// do not replace it. 
			if ((prespawn || persist) && (!owned && (!ammo_ptr || prespawn)))
			{
				int original_i = i;
				for(j = 0; j < itemspawnlist[original_i].spawnreplacessize; j++)
				{
					if(itemspawnlist[i].spawnreplaces[j].name == candidatename)
					{
						if(trycreateitem(e, itemspawnlist[i], j, itemspawnlist[i].replaceitem))
						{
							j = itemspawnlist[i].spawnreplacessize;
							i = itemspawnlistsize;
						}
					}
				}
			}
		}
	}
}