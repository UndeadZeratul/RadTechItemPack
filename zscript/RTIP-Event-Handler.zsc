// Struct for itemspawn information. 
class RTIPSpawnItem play
{
	// ID by string for spawner
	string spawnName;
	
	// ID by string for spawnees
	Array<RTIPSpawnItemEntry> spawnReplaces;
	
	// Whether or not to persistently spawn.
	bool isPersistent;

	// Whether or not to replace the original item.
	bool replaceItem;

	string toString() {

		let replacements = "[";
		if (spawnReplaces.size()) {
			replacements = replacements..spawnReplaces[0].toString();

			foreach (spawnReplace : spawnReplaces) replacements = replacements..", "..spawnReplace.toString();
		}
		replacements = replacements.."]";


		return String.format("{ spawnName=%s, spawnReplaces=%s, isPersistent=%b, replaceItem=%b }", spawnName, replacements, isPersistent, replaceItem);
	}
}

class RTIPSpawnItemEntry play
{
	string name;
	int    chance;

	string toString() {
		return String.format("{ name=%s, chance=%s }", name, chance >= 0 ? "1/"..(chance + 1) : "never");
	}
}

// Struct for passing useinformation to ammunition. 
class RTIPSpawnAmmo play
{
	// ID by string for the header ammo.
	string ammoName;
	
	// ID by string for weapons using that ammo.
	Array<string> weaponNames;

	string toString() {

		let weapons = "[";
		if (weaponNames.size()) {
			weapons = weapons..weaponNames[0];

			foreach (weaponName : weaponNames) weapons = weapons..", "..weaponName;
		}
		weapons = weapons.."]";

		return String.format("{ ammoName=%s, weaponNames=%s }", ammoName, weapons);
	}
}



// One handler to rule them all. 
class RTIPHandler : EventHandler
{
	// List of persistent classes to completely ignore. 
	// This -should- mean this mod has no performance impact. 
	static const string blacklist[] =
	{
		"HDSmoke",
		"BloodTrail",
		"CheckPuff",
		"WallChunk",
		"HDBulletPuff",
		"HDFireballTail",
		"ReverseImpBallTail",
		"HDSmokeChunk",
		"ShieldSpark",
		"HDFlameRed",
		"HDMasterBlood",
		"PlantBit",
		"HDBulletActor",
		"HDLadderSection"
	};

	// List of weapon-ammo associations.
	// Used for ammo-use association on ammo spawn (happens very often). 
	array<RTIPSpawnAmmo> ammoSpawnList;
	
	// List of item-spawn associations.
	// used for item-replacement on mapload. 
	array<RTIPSpawnItem> itemSpawnList;

	bool cvarsAvailable;
	
	// appends an entry to itemSpawnList;
	void addItem(string name, Array<RTIPSpawnItemEntry> replacees, bool persists, bool rep=true)
	{

		if (hd_debug) {
			let msg = "Adding "..(persists ? "Persistent" : "Non-Persistent").." Replacement Entry for "..name..": ["..replacees[0].toString();

			if (replacees.size() > 1) foreach (replacee : replacees) msg = msg..", "..replacee.toString();

			console.printf(msg.."]");
		}

		// Creates a new struct;
		RTIPSpawnItem spawnee = RTIPSpawnItem(new('RTIPSpawnItem'));
		
		// Populates the struct with relevant information,
		spawnee.spawnName = name;
		spawnee.isPersistent = persists;
		spawnee.replaceItem = rep;

		foreach (replacee : replacees) spawnee.spawnReplaces.push(replacee);
		
		// Pushes the finished struct to the array. 
		itemSpawnList.push(spawnee);
	}

	RTIPSpawnItemEntry addItemEntry(string name, int chance)
	{
		// Creates a new struct;
		RTIPSpawnItemEntry spawnee = RTIPSpawnItemEntry(new('RTIPSpawnItemEntry'));
		spawnee.name = name.makeLower();
		spawnee.chance = chance;
		return spawnee;
	}

	// appends an entry to ammoSpawnList;
	void addAmmo(string name, Array<string> weapons)
	{
		// Creates a new struct;
		RTIPSpawnAmmo spawnee = RTIPSpawnAmmo(new('RTIPSpawnAmmo'));
		spawnee.ammoName = name.makeLower();
		
		// Populates the struct with relevant information,
		foreach (weapon : weapons) spawnee.weaponNames.push(weapon.makeLower());

		// Pushes the finished struct to the array. 
		ammoSpawnList.push(spawnee);
	}


	// Populates the replacement and association arrays. 
	void init()
	{
		cvarsAvailable = true;

		// --------------------
		// Item Spawns
		// --------------------

		// Field Medic Kit
		Array<RTIPSpawnItemEntry> spawns_fieldmedic;
		spawns_fieldmedic.push(additementry('PortableStimpack', fieldmedic_stimpack_bias));
		spawns_fieldmedic.push(additementry('PortableMedikit', fieldmedic_medikit_bias));
		additem('HDFieldMedicKit', spawns_fieldmedic, fieldmedic_persistent_spawning);

		// First Aid Spray
		Array<RTIPSpawnItemEntry> spawns_firstaidspray;
		spawns_firstaidspray.push(additementry('PortableStimpack', firstaidspray_stimpack_bias));
		spawns_firstaidspray.push(additementry('PortableMedikit', firstaidspray_medikit_bias));
		additem('HDFirstAidSpray', spawns_firstaidspray, firstaidspray_persistent_spawning);

		// Radi-Cola
		Array<RTIPSpawnItemEntry> spawns_radicola;
		// This technically isn't really accurate but I don't feel like screwing with it more before it's released. - [Ted]
		spawns_radicola.push(additementry('HDHealingPotion', radicola_healthbonus_bias));
		spawns_radicola.push(additementry('PortableStimpack', radicola_stimpack_bias));
    	spawns_radicola.push(additementry('PortableMedikit', radicola_medikit_bias));
		spawns_radicola.push(additementry('HDGoreBits', radicola_gorebits_bias));
		spawns_radicola.push(additementry('TerrorCasing', radicola_gorebits_bias));
		additem('HDRadiCola', spawns_radicola, radicola_persistent_spawning, false);

		// Half-pack
		Array<RTIPSpawnItemEntry> spawns_halfpack;
		spawns_halfpack.push(additementry('WildBackpack', halfpack_spawn_bias));
		additem('WildHalfPack', spawns_halfpack, halfpack_persistent_spawning);

		// Anti-Gravity Boots
		Array<RTIPSpawnItemEntry> spawns_gravboots;
		spawns_gravboots.push(additementry('HDSoulsphere', gravboots_spawn_bias));
		additem('AntiGravBoots', spawns_gravboots, gravboots_persistent_spawning, false);

    	// Anti-Radiation Boots
		Array<RTIPSpawnItemEntry> spawns_radboots;
		spawns_radboots.push(additementry('PortableRadsuit', radboots_spawn_bias));
		additem('ProtectiveRadBoots', spawns_radboots, radboots_persistent_spawning, false);

		// Leather Armor
		Array<RTIPSpawnItemEntry> spawns_jacketarmour;
		spawns_jacketarmour.push(additementry('HDArmour', jacketarmour_spawn_bias));
		additem('HDLeatherArmour', spawns_jacketarmour, jacketarmour_persistent_spawning);
	}
	
	// Random stuff, stores it and forces negative values just to be 0.
	bool giveRandom(int chance)
	{
		if (chance > -1)
		{
			let result = random(0, chance);

			if (hd_debug) console.printf("Rolled a "..(result + 1).." out of "..(chance + 1));

			return result == 0;
		}

		return false;
	}

	// Tries to create the item via random spawning.
	bool tryCreateItem(Actor thing, string spawnName, int chance, bool rep)
	{
		if (giveRandom(chance))
		{
			if (Actor.Spawn(spawnName, thing.pos) && rep)
			{
				if (hd_debug) console.printf(thing.GetClassName().." -> "..spawnName);
				
				thing.destroy();

				return true;
			}
		}

		return false;
	}
	
	override void worldThingSpawned(WorldEvent e)
	{
		// Populates the main arrays if they haven't been already. 
		if (!cvarsAvailable) init();

		// If thing spawned doesn't exist, quit
		if (!e.thing) return;

		// If thing spawned is blacklisted, quit
		foreach (bl : blacklist) if (e.thing is bl) return;

		string candidateName = e.thing.getClassName();
		candidateName = candidateName.makeLower();
		
		// Pointers for specific classes.
		let ammo = HDAmmo(e.thing);

		// If the thing spawned is an ammunition, add any and all items that can use this.
		if (ammo) handleAmmoUses(ammo, candidateName);

		// Return if range before replacing things.
        if (level.MapName ~== "RANGE") return;
		
		handleWeaponReplacements(e.thing, ammo, candidateName);
	}

	private void handleAmmoUses(HDAmmo ammo, string candidateName)
	{
		foreach (ammoSpawn : ammoSpawnList) if (candidateName == ammoSpawn.ammoName) ammo.itemsThatUseThis.copy(ammoSpawn.weaponNames);
	}

	private void handleWeaponReplacements(Actor thing, HDAmmo ammo, string candidateName)
	{
		// Checks if the level has been loaded more than 1 tic.
		bool prespawn = !(level.maptime > 1);

		// Iterates through the list of item candidates for e.thing.
		foreach (itemSpawn : itemSpawnList)
		{
			// if an item is owned or is an ammo (doesn't retain owner ptr), 
			// do not replace it. 
			let item = Inventory(thing);
			if ((prespawn || itemSpawn.isPersistent) && (!(item && item.owner) && (!ammo || prespawn)))
			{
				foreach (spawnReplace : itemSpawn.spawnReplaces)
				{
					if (spawnReplace.name == candidateName)
					{
						if (hd_debug) console.printf("Attempting to replace "..candidateName.." with "..itemSpawn.spawnName.."...");

                        if (tryCreateItem(thing, itemSpawn.spawnName, spawnReplace.chance, itemSpawn.replaceItem)) return;
					}
				}
			}
		}
	}
}
